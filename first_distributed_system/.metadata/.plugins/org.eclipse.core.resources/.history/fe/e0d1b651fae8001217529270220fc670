package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	
	Socket sSocket;
	String serverResponse = "";

	public Server() {
		
	}

	public void setupServer() {
		try {
			ServerSocket sServerSocket = new ServerSocket(7823);
			Thread clientConnection = new Thread();
			System.out.println("Server has started!");
			sSocket = sServerSocket.accept();
			
			boolean isRunning = true;
			while(isRunning) {
				if(sSocket != null) {
					InputStream is = sSocket.getInputStream();
					InputStreamReader clientStream = new InputStreamReader(is);
					BufferedReader buffRead = new BufferedReader(clientStream);
	//				if(buffRead.ready()) {
						String clientRequest = buffRead.readLine();
						
						int choice = Integer.parseInt("" + clientRequest.toCharArray()[2]);
						
						MathLogic logic = new MathLogic();
						if(choice == 1) {
							System.out.println(logic.add(Integer.parseInt("" +clientRequest.toCharArray()[0]), Integer.parseInt("" + clientRequest.toCharArray()[1])));
							serverResponse = "Your addition summed to " + logic.add(Integer.parseInt("" +clientRequest.toCharArray()[0]), Integer.parseInt("" + clientRequest.toCharArray()[1]));
							
							//To client now//
							OutputStream os = sSocket.getOutputStream();
							PrintWriter osw = new PrintWriter(os);
							System.out.println("Creating the message from the server to send to the client.");
							osw.write(serverResponse);
							System.out.println("Server is writing message.");
							osw.flush();
							//Done sending to client//
							
							isRunning = false;
						}
						else if(choice == 2) {
							System.out.println(logic.subtract(Integer.parseInt("" +clientRequest.toCharArray()[0]), Integer.parseInt("" + clientRequest.toCharArray()[1])));
							serverResponse = "The answer for the subtraction is " + logic.add(Integer.parseInt("" +clientRequest.toCharArray()[0]), Integer.parseInt("" + clientRequest.toCharArray()[1]));
							
							//To client now//
							OutputStream os = sSocket.getOutputStream();
							PrintWriter osw = new PrintWriter(os);
							System.out.println("Creating the message from the server to send to the client.");
							osw.write(serverResponse);
							System.out.println("Server is writing message.");
							osw.flush();
							sSocket.shutdownOutput();
							//Done sending to client//
							
							isRunning = false;
						}
	//				}
				}
			}

//			ServerSocket myServerSocket = new ServerSocket(7823);
//			System.out.println("My server socket has been created!");
//			Socket mySocket = null;
//			boolean isRunning = true;
//			while(isRunning) {
//				mySocket = myServerSocket.accept();
//				System.out.println("The servers socket is now open and received a connection!");
//				if(mySocket != null) {
//					BufferedReader clientIn = new BufferedReader(new InputStreamReader(mySocket.getInputStream()));
//					String serverReply = "Hi " + clientIn.readLine();
//					OutputStream toClientStream = mySocket.getOutputStream();
//					PrintWriter toClient = new PrintWriter(toClientStream, false);
//					toClient.print(serverReply);
//					System.out.println("I'm sending the reply: " + serverReply);
//					toClient.flush();
//					toClient.close();
//					myServerSocket.close();
//					isRunning = true;
//				}
//			}
			
			System.out.println("The server has stopped!");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
